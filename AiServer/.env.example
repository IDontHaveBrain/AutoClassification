##############################################
# AiServer .env.example
# Copy to .env and fill in real values.
# ─ Security: Never commit your real keys! ─
##############################################

#############################
# 1) Flask Application
#############################
# Secret key for session signing and security
# Keep this random and confidential in all environments
SECRET_KEY=your-secret-key-here

# Flask debug mode - only enable in local development
DEBUG=false

# Enable Flask testing features (unittest clients, etc)
TESTING=false

#############################
# 2) RabbitMQ Configuration
#############################
# RabbitMQ broker hostname or IP address
RABBITMQ_HOST=dev.nobrain.cc

# RabbitMQ broker port
RABBITMQ_PORT=5672

# Main classification queue for AI processing tasks
RABBITMQ_QUEUE=ClassifyQueue

# Response queue for classification results
RABBITMQ_RESPONSE_QUEUE=ResponseQueue

# Exchange name for message routing
RABBITMQ_EXCHANGE=ClassifyExchange

# Training queue for YOLO model training tasks
RABBITMQ_TRAIN_QUEUE=TrainQueue

#############################
# 3) Database Configuration
#############################
# SQLite database URI for local development
# For production, use PostgreSQL: postgresql://user:pass@host:port/dbname
DATABASE_URI=sqlite:///dev.db

#############################
# 4) Logging Configuration
#############################
# Root log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

#############################
# 5) Application Settings
#############################
# Base directory for file storage and operations
BASE_DIR=C:/AutoClass

# Legacy API key (may be unused in current implementation)
API_KEY=test

#############################
# 6) Priority-Based LLM API Keys
#############################
# The system uses a priority-based fallback system for AI models:
#   1) OPENROUTER_API_KEY   (highest priority) → google/gemini-2.5-flash
#   2) GEMINI_API_KEY       (second priority)  → gemini/gemini-2.5-flash
#   3) OPENAI_API_KEY       (third priority)   → gpt-4.1-mini
#   4) ANTHROPIC_API_KEY    (lowest priority)  → claude-3-5-haiku-latest
#
# The system will automatically select the first available API key
# in priority order. If none are configured, the application will
# fail to start with a clear error message.
#
# You only need to configure ONE of these keys, but having multiple
# provides redundancy and fallback options.

# Highest priority: Google Gemini via OpenRouter
# Model: google/gemini-2.5-flash
# Get your key from: https://openrouter.ai/
OPENROUTER_API_KEY=

# Second priority: Direct Google Gemini API
# Model: gemini/gemini-2.5-flash
# Get your key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=

# Third priority: OpenAI API
# Model: gpt-4.1-mini
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=

# Lowest priority: Anthropic Claude API
# Model: claude-3-5-haiku-latest
# Get your key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=

#############################
# Environment-Specific Settings
#############################
# Development environment settings:
# DEBUG=true
# LOG_LEVEL=DEBUG
# DATABASE_URI=sqlite:///dev.db

# Production environment settings:
# DEBUG=false
# LOG_LEVEL=INFO
# DATABASE_URI=postgresql://user:pass@host:port/dbname
# Use environment variables or secrets management for API keys

#############################
# Security Best Practices
#############################
# • Never commit real API keys to version control
# • Use .env for local development only
# • Store production secrets in environment variables or secrets management
# • Rotate API keys regularly and monitor usage
# • Limit API key permissions where possible
# • Use different keys for development/staging/production

#############################
# Troubleshooting & Debugging
#############################
# • Check logs for "LLM provider selected" messages to see which API key is being used
# • Set LOG_LEVEL=DEBUG to see detailed API request/response information
# • Verify API key validity by testing with the provider's API directly
# • Monitor API usage and rate limits in each provider's dashboard
# • If all API keys fail, check network connectivity and provider status

##############################################
# End of .env.example
##############################################