plugins {
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.jetbrains.kotlin.jvm' version '2.2.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.2.0'
    id 'org.jetbrains.kotlin.plugin.jpa' version '2.2.0'
    id 'org.jetbrains.kotlin.plugin.allopen' version '2.2.0'
    id 'org.jetbrains.kotlin.plugin.noarg' version '2.2.0'
    id 'org.jetbrains.kotlin.kapt' version '2.2.0'
}

group = 'cc.nobrain.dev'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

allOpen {
    annotation('jakarta.persistence.Entity')
    annotation('jakarta.persistence.MappedSuperclass')
    annotation('jakarta.persistence.Embeddable')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.amqp:spring-rabbit-stream'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.hibernate.orm:hibernate-jpamodelgen'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // TestContainers for Docker-based integration testing
    testImplementation platform('org.testcontainers:testcontainers-bom:1.20.3')
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:rabbitmq'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.8.9'
    implementation 'org.modelmapper:modelmapper:3.2.4'
    testImplementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.11.0'
    testRuntimeOnly 'com.h2database:h2'
}

def snippetsDir = file('build/generated-snippets')

test {
    outputs.dir snippetsDir
    useJUnitPlatform {
        excludeTags 'docker'
    }
    description = 'Run fast H2-based unit and integration tests'
    group = 'verification'
}

task dockerTest(type: Test) {
    outputs.dir snippetsDir
    useJUnitPlatform {
        includeTags 'docker'
    }
    description = 'Run Docker-based integration tests with TestContainers'
    group = 'verification'
    
    // Ensure Docker tests have more time and resources
    maxHeapSize = '2048m'
    systemProperty 'junit.jupiter.execution.timeout.default', '5m'
}

asciidoctor {
    inputs.dir snippetsDir
            dependsOn test
}

//task buildWithoutTest {
//    dependsOn 'clean', 'build'
//    test.enabled = false
//}

clean {
    doLast {
        file('out').deleteDir()
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}