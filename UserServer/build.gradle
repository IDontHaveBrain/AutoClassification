plugins {
    id 'org.springframework.boot' version '3.2.8'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.noarg' version '1.9.24'
    id 'org.jetbrains.kotlin.kapt' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.9.24'
    id 'io.freefair.lombok' version '8.6'
    id 'idea'
}

group = 'cc.nobrain.dev'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

allOpen {
    annotation('jakarta.persistence.Entity')
    annotation('jakarta.persistence.MappedSuperclass')
    annotation('jakarta.persistence.Embeddable')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.amqp:spring-rabbit-stream'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'

    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    kapt 'org.springframework.boot:spring-boot-configuration-processor'
    kapt 'org.projectlombok:lombok'
    kapt 'org.hibernate.orm:hibernate-jpamodelgen'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.9.1'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'

    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    kapt 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    kapt 'jakarta.annotation:jakarta.annotation-api'
    kapt 'jakarta.persistence:jakarta.persistence-api'

    implementation 'org.modelmapper:modelmapper:3.2.0'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
}

kapt {
    keepJavacAnnotationProcessors = true
}

def snippetsDir = file('build/generated-snippets')
test {
    outputs.dir snippetsDir
            useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
            dependsOn test
}

//task buildWithoutTest {
//    dependsOn 'clean', 'build'
//    test.enabled = false
//}

def generated = 'src/main/generated'
sourceSets {
    main {
        kotlin {
            srcDirs += file(generated)
        }
        java {
            srcDirs += file(generated)
        }
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(generated)
}

clean {
    doLast {
        file(generated).deleteDir()
        file('out').deleteDir()
    }
}

idea {
    module {
        def kaptMain = file(generated)
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}
