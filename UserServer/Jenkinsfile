@NonCPS
def sendSlackBuildMessage(color, message){
    slackSend(channel: '젠킨스-로그', color: color, message: message)
}

// UserServer 빌드 및 배포를 위한 Jenkins 파이프라인
pipeline {
    agent any

    environment {
        USER_SERVER_DIR = 'UserServer'
    }

    stages {
        stage('Check Diff') {
            steps {
                slackSend(color: '#0000FF', message: "START: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            }
        }
        stage('Setup') {
            steps {
                sh 'ls -al'
                grantExecutePermission("${USER_SERVER_DIR}/gradlew")
            }
        }
        stage('Build with Gradle') {
            steps {
                dir(USER_SERVER_DIR) {
                    gradleBuild()
                    listArtifacts('build/libs')
                }
            }
        }
        stage('Build Docker image') {
            steps {
                dockerComposeBuild(USER_SERVER_DIR)
            }
        }
        stage('Clean up old images') {
            steps {
                cleanUpDockerImages()
            }
        }
        stage('Run Docker image') {
            steps {
                dockerComposeUp(USER_SERVER_DIR)
            }
        }
    }
    post {
        success {
            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}

def cleanupWorkspace(){
    deleteDir()
}

def checkoutGitRepo(gitUrl){
    git gitUrl
}

def grantExecutePermission(path){
    sh "chmod +x ${path}"
}

def gradleBuild(){
    // 배포 빌드 시 테스트 실행 시간 단축을 위해 테스트 제외
    sh './gradlew build --exclude-task test'
}

def listArtifacts(path){
    sh "ls -la ${path}"
}

def dockerComposeBuild(service){
    sh "docker compose build ${service}"
}

def cleanUpDockerImages(){
    sh 'docker image prune -f'
}

def dockerComposeUp(service){
    sh "docker compose up -d ${service}"
}